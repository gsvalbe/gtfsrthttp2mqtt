# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pieturas-gtfs-rt.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import gtfs_realtime_pb2 as gtfs__realtime__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16pieturas-gtfs-rt.proto\x12\x08pieturas\x1a\x13gtfs-realtime.proto\"w\n\x05Route\x12\x10\n\x08route_id\x18\x01 \x01(\t\x12\x12\n\nroute_type\x18\x02 \x01(\x05\x12\r\n\x05\x63olor\x18\x03 \x01(\t\x12\x12\n\ntext_color\x18\x04 \x01(\t\x12\x12\n\nshort_name\x18\x05 \x01(\t\x12\x11\n\tlong_name\x18\x06 \x01(\t:D\n\x05route\x12#.transit_realtime.VehicleDescriptor\x18\xa8\x46 \x01(\x0b\x32\x0f.pieturas.Route:>\n\x10vehicle_headsign\x12#.transit_realtime.VehicleDescriptor\x18\xa9\x46 \x01(\t:C\n\x15vehicle_attribute_ids\x12#.transit_realtime.VehicleDescriptor\x18\xaa\x46 \x03(\t:L\n\x1e\x64isplayed_vehicle_attribute_id\x12#.transit_realtime.VehicleDescriptor\x18\xab\x46 \x01(\t::\n\x0cvehicle_type\x12#.transit_realtime.VehicleDescriptor\x18\xac\x46 \x01(\x05:@\n\x12vehicle_make_model\x12#.transit_realtime.VehicleDescriptor\x18\xad\x46 \x01(\t:8\n\x11\x64iverted_headsign\x12\x1c.transit_realtime.TripUpdate\x18\xa8\x46 \x01(\tB\x1d\n\x1b\x63om.google.transit.realtime')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'pieturas_gtfs_rt_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\033com.google.transit.realtime'
  _globals['_ROUTE']._serialized_start=57
  _globals['_ROUTE']._serialized_end=176
# @@protoc_insertion_point(module_scope)
